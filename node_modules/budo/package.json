{
  "name": "budo",
  "version": "3.1.1",
  "description": "a browserify server for rapid prototyping",
  "main": "index.js",
  "bin": {
    "budo": "./bin/cmd.js"
  },
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com",
    "url": "https://github.com/mattdesl"
  },
  "dependencies": {
    "bole": "^2.0.0",
    "chokidar": "^1.0.1",
    "concat-stream": "^1.4.8",
    "dargs": "^4.0.0",
    "debounce": "^1.0.0",
    "ecstatic": "^0.7.2",
    "events": "^1.0.2",
    "getport": "^0.1.0",
    "inject-lr-script": "^1.0.0",
    "minimist": "^1.1.0",
    "resolve": "^1.1.6",
    "resolve-npm-which": "^1.0.1",
    "routes-router": "^4.1.2",
    "through2": "^0.6.3",
    "tiny-lr": "^0.1.5",
    "xtend": "^4.0.0"
  },
  "devDependencies": {
    "2d-context": "^1.2.0",
    "brfs": "^1.4.0",
    "browserify": "^9.0.8",
    "canvas-fit": "^1.2.0",
    "domready": "^1.0.7",
    "garnish": "^2.1.2",
    "inject-lr-script": "^1.0.1",
    "raf-loop": "^1.0.1",
    "request": "^2.53.0",
    "tap-spec": "^3.0.0",
    "tape": "^4.0.0",
    "tree-kill": "0.0.6",
    "uglify-js": "^2.4.19",
    "vm": "0.0.1",
    "watchify": "^3.1.1",
    "win-spawn": "^2.0.0"
  },
  "scripts": {
    "test": "tape test/test*.js | tap-spec",
    "silent": "./bin/cmd.js example/app.js:bundle.js --dir example --stream false",
    "start": "./bin/cmd.js example/app.js:bundle.js --dir example --verbose | garnish",
    "live": "./bin/cmd.js example/app.js:bundle.js --dir example --live -v | garnish -v",
    "live-plugin": "./bin/cmd.js example/app.js:bundle.js --dir example --live-plugin -v | garnish",
    "brfs1": "./bin/cmd.js example/app.js:bundle.js --dir example -v -t [ brfs --foo ] | garnish",
    "brfs2": "./bin/cmd.js example/app.js:bundle.js --dir example -v -- -t [ brfs --foo ] | garnish",
    "remap": "./bin/cmd.js example/*.js --serve bundle2.js --dir example --live -v | garnish"
  },
  "keywords": [
    "browserify",
    "watchify",
    "browser",
    "dev",
    "development",
    "server",
    "beefy",
    "wzrd",
    "local",
    "locally",
    "localhost",
    "watch",
    "live",
    "reload",
    "livereload",
    "lr"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/mattdesl/budo.git"
  },
  "homepage": "https://github.com/mattdesl/budo",
  "bugs": {
    "url": "https://github.com/mattdesl/budo/issues"
  },
  "readme": "# budō\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nThis is a browserify development server inspired by [beefy](https://github.com/chrisdickinson/beefy) and [wzrd](https://github.com/maxogden/wzrd), but specifically focused on incremental reloading and LiveReload integration (including CSS injection).\n\nNote that budo needs a copy of `watchify` installed. It can be either local (preferred) or global.\n\n```sh\nnpm install budo watchify -g\n```\n\nThe simplest use cases will start up a server with a default `index.html` and incrementally bundle your source on filesave. The requests are delayed until the bundle has finished, so you won't be served stale or empty bundles if you refresh the page mid-update. Examples:\n\n```sh\n# serve file on port 9966\nbudo index.js\n\n# enable LiveReload on html/css/js changes\n# show timing information on re-bundle\nbudo index.js --verbose --live\n\n# pass some options to browserify\nbudo index.js --live -- -t babelify --full-paths\n```\n\nThen open [http://localhost:9966](http://localhost:9966) to see the content in action.\n\nTo pretty-print in terminal, [garnish](https://github.com/mattdesl/garnish), [bistre](https://github.com/hughsk/bistre) or another [ndjson](http://ndjson.org)-based stream can be used:\n\n```sh\nbudo index.js | garnish\n```\n\nSee [docs](#docs) for more features. PRs/suggestions/comments welcome.\n\n## docs\n\n- [basic usage](docs/basics.md)\n- [comparisons](docs/comparisons.md)\n- [API and integrations (Gulp, Grunt, npm scripts)](docs/programmatic-usage.md)\n- [error reporting](docs/errors.md)\n- [running tests and examples](docs/tests-and-examples.md)\n- [script injection with budo-chrome](https://github.com/mattdesl/budo-chrome)\n- [rapid prototyping with budō and wzrd](http://mattdesl.svbtle.com/rapid-prototyping)\n\n## usage\n\n[![NPM](https://nodei.co/npm/budo.png)](https://www.npmjs.com/package/budo)\n\n### CLI\n\nDetails for `budo` command-line interface. Other options will be sent to browserify.\n\n```sh\nUsage:\n  budo [entries] [opts]\n\nOptions:\n  --help, -h       show help message\n  --port           the port to run, default 9966\n  --host           the host, default \"localhost\"\n  --dir            the directory to serve, and the base for --outfile\n  --serve          override the bundle path being served\n  --live           enable LiveReload integration\n  --live-plugin    enable LiveReload but do not inject script tag\n  --live-port      the LiveReload port, default 35729\n  --verbose, -v    verbose timing information for re-bundles\n  --poll=N         use polling for file watch, with optional interval N\n  --no-stream      do not print messages to stdout\n  --no-debug       do not use inline source maps\n```\n\nBy default, messages will be printed to `stdout` and `debug` will be sent to browserify (for source maps). You can turn these off with `--no-stream` and `--no-debug`, respectively. \n\nAny options after `--` will be sent unchanged to browserify. This is currently required for subarg syntax. Example:\n\n```js\nbudo index.js --live -- -t [ babelify --exetensions .es6 ]\n```\n\n### API\n\nThe API mirrors the CLI except it does not write to `process.stdout` by default, and does not attempt to find available ports from a base port. \n\n```js\nvar budo = require('budo')\n\nbudo('./src/index.js', {\n  live: true,             //live reload\n  stream: process.stdout, //log to stdout\n  port: 8000              //use this port\n}).on('connnect', function(ev) {\n  //...\n})\n```\n\nSee [API usage](docs/programmatic-usage.md) for more details.\n\n## Script Injection\n\n[![screenshot](http://i.imgur.com/LJP7d9I.png)](https://www.youtube.com/watch?v=cfgeN3G_Gl0)\n\n<sup>[(click for demo)](https://www.youtube.com/watch?v=cfgeN3G_Gl0)</sup>\n\nThe original motivation for making budō was to build a simple tool around Chrome Script Injection. This has since split off into its own repository: [budo-chrome](https://github.com/mattdesl/budo-chrome) to minimize the scope of budō. \n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/budo/blob/master/LICENSE.md) for details.",
  "readmeFilename": "README.md",
  "_id": "budo@3.1.1",
  "dist": {
    "shasum": "c4eeaa9cd66573adf89589cf78311157445ae8bc"
  },
  "_from": "budo@^3.0.4",
  "_resolved": "https://registry.npmjs.org/budo/-/budo-3.1.1.tgz"
}
