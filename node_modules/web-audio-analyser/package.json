{
  "name": "web-audio-analyser",
  "version": "2.0.0",
  "description": "A thin wrapper around the Web Audio API that lets you take some audio and get its waveform/frequency data in return.",
  "main": "index.js",
  "scripts": {
    "test": "npm start",
    "start": "beefy demo.js:bundle.js --live -- -t brfs",
    "prepublish": "browserify -t brfs demo.js > bundle.js"
  },
  "author": {
    "name": "Hugh Kennedy",
    "email": "hughskennedy@gmail.com",
    "url": "http://hughskennedy.com/"
  },
  "license": "MIT",
  "devDependencies": {
    "gl-matrix": "~2.0.0",
    "game-shell-orbit-camera": "0.0.0",
    "gl-vao": "0.0.2",
    "gl-buffer": "~0.1.1",
    "gl-shader": "0.0.6",
    "gl-now": "0.0.4",
    "brfs": "~0.0.8",
    "soundcloud-badge": "0.0.0"
  },
  "dependencies": {},
  "repository": {
    "type": "git",
    "url": "git://github.com/hughsk/web-audio-analyser.git"
  },
  "keywords": [
    "audio",
    "web",
    "api",
    "browserify",
    "analysis",
    "fft",
    "waveform",
    "reactive"
  ],
  "bugs": {
    "url": "https://github.com/hughsk/web-audio-analyser/issues"
  },
  "gitHead": "3efe6e7da12701e9e6b7ce1e780a11874436faff",
  "homepage": "https://github.com/hughsk/web-audio-analyser",
  "_id": "web-audio-analyser@2.0.0",
  "_shasum": "acf277e2d78b121cc71dfbd4ad8d3d9b913c993f",
  "_from": "web-audio-analyser@*",
  "_npmVersion": "1.4.24",
  "_npmUser": {
    "name": "hughsk",
    "email": "hughskennedy@gmail.com"
  },
  "maintainers": [
    {
      "name": "hughsk",
      "email": "hughskennedy@gmail.com"
    }
  ],
  "dist": {
    "shasum": "acf277e2d78b121cc71dfbd4ad8d3d9b913c993f",
    "tarball": "http://registry.npmjs.org/web-audio-analyser/-/web-audio-analyser-2.0.0.tgz"
  },
  "directories": {},
  "_resolved": "https://registry.npmjs.org/web-audio-analyser/-/web-audio-analyser-2.0.0.tgz",
  "readme": "# web-audio-analyser [![experimental](http://hughsk.github.io/stability-badges/dist/experimental.svg)](http://github.com/hughsk/stability-badges) #\n\nA thin wrapper around the Web Audio API that lets you take some audio and get\nits waveform/frequency data in return.\n\n[![web-audio-analyser](https://nodei.co/npm/web-audio-analyser.png?mini=true)](https://nodei.co/npm/web-audio-analyser)\n\n## Usage ##\n\n#### `analyser = require('web-audio-analyser')(audio[, ctx][, opts])` ####\n\nTakes some form of `audio` as the first argument. This may be one of the\nfollowing:\n\n* An `<audio>` element.\n* A `MediaStream` object created by calling `getUserMedia`.\n* Any kind of `AudioSourceNode`.\n\nOptionally, you can pass in your own `AudioContext` instance too. **Note** there\nmay only be one instance of this per page, and if not supplied one will be\ncreated for you.\n\nYou can also use the following options:\n\n* `stereo`: retrieve separate data from the left and right audio channels.\n* `audible`: whether or not to play the audio you're analysing. Defaults to\n  `true`, but set this to `false` to disable. You can use `analyser.output`\n  to pass the resulting output elsewhere.\n\n\n#### `analyser.waveform([ui8array][, channel])` ####\n\nCopies the audio's current time-domain data into a `Uint8Array`. If you don't\npass your own in, one will be created for you: this will be reused, so it's\nsafe to call in an animation loop.\n\nIf you've enabled the `stereo` option, you should pass `channel` as either\n`0` or `1` to retrieve output from the left and right channels respectively.\n\n#### `analyser.frequencies([ui8array][, channel])` ####\n\nMuch like `analyser.waveform`, with the exception of copying the audio's\ncurrrent frequency data into a `Uint8Array`.\n",
  "readmeFilename": "README.md"
}
