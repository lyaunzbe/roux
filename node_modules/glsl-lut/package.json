{
  "name": "glsl-lut",
  "version": "1.1.0",
  "description": "lookup table color transforms for glslify",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com"
  },
  "dependencies": {},
  "devDependencies": {
    "a-big-triangle": "0.0.0",
    "browserify": "^9.0.8",
    "budo": "^3.0.4",
    "garnish": "^2.1.3",
    "gl-context": "~0.1.0",
    "gl-now": "~1.3.1",
    "gl-shader": "^4.0.1",
    "gl-texture2d": "~1.0.1",
    "glslify": "^2.1.2",
    "lena": "~1.0.0",
    "tape": "~2.13.2",
    "watchify": "^3.1.1"
  },
  "bin": {
    "glsl-lut": "./bin/cmd.js"
  },
  "scripts": {
    "test": "tape test.js",
    "start": "budo example/index.js --dir example --live -t glslify | garnish",
    "build": "browserify example/index.js -t glslify -o example/static/bundle.js"
  },
  "testling": {
    "files": "test.js",
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattdesl/glsl-lut.git"
  },
  "homepage": "https://github.com/mattdesl/glsl-lut",
  "bugs": {
    "url": "https://github.com/mattdesl/glsl-lut/issues"
  },
  "directories": {
    "example": "example"
  },
  "keywords": [
    "glslify",
    "glsl",
    "webgl",
    "shader",
    "color",
    "transform",
    "lookup",
    "table",
    "lut",
    "instagram",
    "filter",
    "curves",
    "brightness",
    "contrast",
    "saturation",
    "hue",
    "levels",
    "grayscale"
  ],
  "readme": "# glsl-lut [![unstable](http://badges.github.io/stability-badges/dist/unstable.svg)](http://github.com/badges/stability-badges)\n\n[![ABTest](http://i.imgur.com/QbSAX2h.png)](http://mattdesl.github.io/glsl-lut/example/demo.html)\n\n[Demo here](http://mattdesl.github.io/glsl-lut/example/demo.html)\n\nUse a texture as a lookup table to apply color transforms in a shader. Original implementation from GPUImage, see [here](http://liovch.blogspot.ca/2012/07/add-instagram-like-effects-to-your-ios.html). For more details on the concept, see [here](http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter24.html).\n\nThis is geared towards OpenGL ES, so no 3D textures are used, and the lookup table is 512x512 (using every 4th color).\n\n## Usage\n\n[![NPM](https://nodei.co/npm/glsl-lut.png)](https://nodei.co/npm/glsl-lut/)\n\nFirst, grab the original (un-altered) lookup table from the [image](image) folder, or with the [CLI](#cli). \n\n\nThen you can apply any filters with Photoshop or at runtime to the lookup table image. These can be things like curves, levels, grayscale, etc. Each transform must be independent of surrounding pixels (no blurs, median, etc).\n\nIn your shader, sample the lookup texture (`uLookup` below) and pass the original `vec4` color to the transform method.\n\n```glsl\n\nuniform sampler2D uLookup;\n\n#pragma glslify: transform = require('glsl-lut')\n\n...\n    vec4 original = texture2D(uTexture, vUv);\n\tgl_FragColor = transform(original, uLookup);\n```\n\n## Flipped Y Lookup\n\nDepending on your environment, the Y texture coordinate may need to be inverted during the lookup to get the correct color output. If your colours look messed up, this is most likely the case. Require the inverted function like so:\n\n```\n#pragma glslify: transform = require(glsl-lut/flipY)\n```\n\n## Defines\n\nRequiring `glsl-lut/flipY` is the same as making a define for `LUT_FLIP_Y`. You can also define `LUT_NO_CLAMP` before requiring the function and the incoming texture color will not have a `clamp(c, 0.0, 1.0)` operation applied. This may be useful if you plan to take advantage of hardware texture wrapping. \n\n## CLI\n\nYou can also use this tool as a command-line application to create a new (default) lookup table PNG image.\n\n```sh\nnpm install -g glsl-lut\n```\n\nThen: \n\n```sh\nglsl-lut > images/lut.png\n```\n\n<sup>See [this file](https://github.com/BradLarson/GPUImage/blob/master/framework/Source/GPUImageLookupFilter.h) for further details on generating a lookup table programmatically.</sup>\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/glsl-lut/blob/master/LICENSE.md) for details.",
  "readmeFilename": "README.md",
  "_id": "glsl-lut@1.1.0",
  "dist": {
    "shasum": "b4919a12ab71d40e5d7c2e4922839749e3dcb03e"
  },
  "_from": "glsl-lut@^1.1.0",
  "_resolved": "https://registry.npmjs.org/glsl-lut/-/glsl-lut-1.1.0.tgz"
}
