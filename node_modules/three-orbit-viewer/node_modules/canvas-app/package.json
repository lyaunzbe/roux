{
  "name": "canvas-app",
  "version": "2.4.0",
  "description": "sets up a retina-scaled canvas with render loop",
  "main": "index.js",
  "license": "MIT",
  "author": {
    "name": "Matt DesLauriers",
    "email": "dave.des@gmail.com"
  },
  "dependencies": {
    "add-event-listener": "0.0.1",
    "debounce": "^1.0.0",
    "is-webgl-context": "^1.0.0",
    "webgl-context": "^1.2.1"
  },
  "devDependencies": {
    "domready": "^1.0.5",
    "gl-clear": "0.0.1",
    "tape": "~2.13.2",
    "webgl-context": "^1.2.1"
  },
  "scripts": {
    "test": "tape test.js"
  },
  "testling": {
    "files": "test.js",
    "browsers": [
      "ie/6..latest",
      "chrome/22..latest",
      "firefox/16..latest",
      "safari/latest",
      "opera/11.0..latest",
      "iphone/6",
      "ipad/6",
      "android-browser/latest"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mattdesl/canvas-app.git"
  },
  "homepage": "https://github.com/mattdesl/canvas-app",
  "bugs": {
    "url": "https://github.com/mattdesl/canvas-app/issues"
  },
  "keywords": [
    "canvas",
    "2d",
    "webgl",
    "gl",
    "context",
    "context2d",
    "render",
    "renderer",
    "loop",
    "frame",
    "game",
    "shell",
    "animation"
  ],
  "readme": "# canvas-app\n\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nThe Easy Bake Oven of canvas rendering. Sets up a canvas for 2D or WebGL context, handling a few things like:\n\n- CSS scaling for retina displays with a devicePixelRatio of > 1.0\n- Boilerplate to safely grab 2D/webgl context\n- resizes the canvas to full-screen on resize & device orientation change (by default)\n- basic delta time calculation\n- start/stop handling\n- current FPS\n\nSimplest use might look like this:\n\n```js\n//a simple render loop\nfunction render(context, width, height, dt) {\n\tcontext.clearRect(0, 0, width, height);\n\tcontext.fillRect(20, 50, 25, 25);\n\n\tcontext.fillText(\"FPS: \"+this.fps, 20, 20);\n}\n\n//defaults to a full-screen canvas\nvar app = require('canvas-app')(render);\n\n//append to DOM\ndocument.body.appendChild( app.canvas );\n\n//start render loop\napp.start();\n```\n\nFor simple use like the above, you may want to use [canvas-testbed](https://github.com/mattdesl/canvas-testbed), which also handles DOM ready event, better body styling for full-screen canvas apps, and requestAnimationFrame polyfills.\n\n## Usage\n\n[![NPM](https://nodei.co/npm/canvas-app.png)](https://nodei.co/npm/canvas-app/)\n\nAnother example:\n\n```js\nvar app = require('canvas-app')(renderHandler, {\n\twidth: 256,\n\theight: 256,\n\tonce: true, //only render once\n\tretina: false, //don't try to scale for retina displays\n});\n\n//renders a single frame\napp.renderOnce();\n```\n\nThe constructor can take two forms:\n\n```js\ncanvasApp(renderHandler, options);\ncanvasApp(options);\n```\n\n### options\n\n- `width` force a width of the canvas in pixels. If passed, resize events will be ignored\n- `height` force a height of the canvas in pixels. If passed, resize events will be ignored\n- `ignoreResize` if true, resize events will be ignored\n- `retina` default true, whether to scale the canvas style and context for device pixel ratio\n- `once` only renders a single frame, and then again on resize\n- `canvas` the canvas element to use, otherwise creates a new element\n- `context` the context to use, can be either 'webgl' or '2d', defaults to 2d\n- `contextAttributes` passed to the getContext call\n- `onResize` a function called on resize with arguments `width, height`\n- `onRender` a function called on render with arguments `context, width, height, deltaTime` (can instead be passed as first argument to the constructor)\n- `resizeDebounce` if we are using built-in resize handlers, they will be debounced by 50 ms unless you specify a value explicitly here\n\nIf `context is a WebGLRenderingContext or CanvasRenderingContext, it will be used along with its associated `canvas`. This is useful to avoid consecutive `getContext('webgl')` calls which can interfere with WebGL inspectors. \n\n### methods\n\n- `renderOnce()` renders a single frame\n- `start()` starts the render loop\n- `stop()` stops the current render loop\n- `resize(width, height)` resizes the canvas to the given size. You should probably use `ignoreResize` if you want to manually handle resize events.\n\n### properties\n\n- `canvas` the canvas element\n- `context` the 2D or WebGL rendering context\n- `width`, `height` the current size, not scaled by devicePixelRatio\n- `running` whether the loop is currently running\n- `deviceWidth`, `deviceHeight` the actual device height (i.e. size * devicePixelRatio). This is needed for glViewport, glScissor, etc.\n\n### context scaling / viewport\n\nFor 2D contexts, `scale()` is called before rendering based on the deviePixelRatio. For WebGL contexts, `gl.viewport()` is called before rendering with the device size. \n\nIf `retina` is false, the device size will be assumed to be the same as the canvas size. \n\n## License\n\nMIT, see [LICENSE.md](http://github.com/mattdesl/canvas-app/blob/master/LICENSE.md) for details.",
  "readmeFilename": "README.md",
  "_id": "canvas-app@2.4.0",
  "dist": {
    "shasum": "b6b84fc09be4f6ad14fcae8ad7888283381e5e87"
  },
  "_from": "canvas-app@^2.4.0",
  "_resolved": "https://registry.npmjs.org/canvas-app/-/canvas-app-2.4.0.tgz"
}
